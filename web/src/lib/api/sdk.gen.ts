// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-next';
import type { SigninUserData, SigninUserResponse, SigninUserError, SignupUserData, SignupUserResponse, SignupUserError, SignoutUserData, SignoutUserError, AddNewWordData, AddNewWordResponse2, AddNewWordError, GetUserWordListData, GetUserWordListResponse2, GetUserWordListError, RootGetData } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Signin
 * sign in user
 * temporal token is created, and set on cookie
 */
export const signinUser = <ThrowOnError extends boolean = false>(options: Options<SigninUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SigninUserResponse, SigninUserError, ThrowOnError>({
        url: '/user/signin',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Signup
 * insert a new user record
 */
export const signupUser = <ThrowOnError extends boolean = false>(options: Options<SignupUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SignupUserResponse, SignupUserError, ThrowOnError>({
        url: '/user/signup',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Signout
 */
export const signoutUser = <ThrowOnError extends boolean = false>(options?: Options<SignoutUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, SignoutUserError, ThrowOnError>({
        url: '/user/signout',
        ...options
    });
};

/**
 * Add New Word
 * input: an English word
 *
 * 1. 単語入力からアイテムを生成
 * 2. ItemをDBに登録
 * 3. cookieからuser_id取得
 * 4. user_wordテーブルにuser_id, word_idを保存
 *
 * return: itemのid, user_wordテーブルid
 */
export const addNewWord = <ThrowOnError extends boolean = false>(options: Options<AddNewWordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddNewWordResponse2, AddNewWordError, ThrowOnError>({
        url: '/word/add_new_word',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get User Word List
 * Get the list of words saved by the current user.
 */
export const getUserWordList = <ThrowOnError extends boolean = false>(options?: Options<GetUserWordListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserWordListResponse2, GetUserWordListError, ThrowOnError>({
        url: '/word/get_user_word_list',
        ...options
    });
};

/**
 * Root
 */
export const rootGet = <ThrowOnError extends boolean = false>(options?: Options<RootGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};
