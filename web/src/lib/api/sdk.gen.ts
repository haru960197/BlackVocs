// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { SigninData, SigninResponse2, SigninError, AuthSignupData, AuthSignupResponse, AuthSignupError, AuthSignoutData, AddNewWordData, AddNewWordResponse2, AddNewWordError, GetUserWordListData, GetUserWordListResponse2, GetUserWordListError, SuggestWordsData, SuggestWordsResponse2, SuggestWordsError, RootGetData } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Signin
 * Sign in and set JWT cookie.
 */
export const signin = <ThrowOnError extends boolean = false>(options: Options<SigninData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SigninResponse2, SigninError, ThrowOnError>({
        url: '/user/signin',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Signup
 * Create a new user.
 */
export const authSignup = <ThrowOnError extends boolean = false>(options: Options<AuthSignupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthSignupResponse, AuthSignupError, ThrowOnError>({
        url: '/user/signup',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Signout
 * Delete JWT cookie and redirect.
 */
export const authSignout = <ThrowOnError extends boolean = false>(options?: Options<AuthSignoutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/user/signout',
        ...options
    });
};

/**
 * Add New Word
 * Generate a word via DeepSeek (if needed), insert it, and link to current user.
 */
export const addNewWord = <ThrowOnError extends boolean = false>(options: Options<AddNewWordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddNewWordResponse2, AddNewWordError, ThrowOnError>({
        url: '/word/add_new_word',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get User Word List
 * Return the current user's saved word list.
 */
export const getUserWordList = <ThrowOnError extends boolean = false>(options?: Options<GetUserWordListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserWordListResponse2, GetUserWordListError, ThrowOnError>({
        url: '/word/get_user_word_list',
        ...options
    });
};

/**
 * Suggest Words
 * Return suggestions (exact-first then prefix).
 */
export const suggestWords = <ThrowOnError extends boolean = false>(options: Options<SuggestWordsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SuggestWordsResponse2, SuggestWordsError, ThrowOnError>({
        url: '/word/suggest_words',
        ...options
    });
};

/**
 * Root
 */
export const rootGet = <ThrowOnError extends boolean = false>(options?: Options<RootGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};