// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { SigninUserSigninPostData, SigninUserSigninPostResponse, SigninUserSigninPostError, SignupUserSignupPostData, SignupUserSignupPostResponse, SignupUserSignupPostError, SignoutUserSignoutGetData, SignoutUserSignoutGetError, AddNewWordWordAddNewWordPostData, AddNewWordWordAddNewWordPostResponse, AddNewWordWordAddNewWordPostError, GetUserWordListWordGetUserWordListGetData, GetUserWordListWordGetUserWordListGetResponse, GetUserWordListWordGetUserWordListGetError, RootGetData } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Signin
 * sign in user
 * temporal token is created, and set on cookie
 */
export const signinUserSigninPost = <ThrowOnError extends boolean = false>(options: Options<SigninUserSigninPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SigninUserSigninPostResponse, SigninUserSigninPostError, ThrowOnError>({
        url: '/user/signin',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Signup
 * insert a new user record
 */
export const signupUserSignupPost = <ThrowOnError extends boolean = false>(options: Options<SignupUserSignupPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SignupUserSignupPostResponse, SignupUserSignupPostError, ThrowOnError>({
        url: '/user/signup',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Signout
 */
export const signoutUserSignoutGet = <ThrowOnError extends boolean = false>(options?: Options<SignoutUserSignoutGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, SignoutUserSignoutGetError, ThrowOnError>({
        url: '/user/signout',
        ...options
    });
};

/**
 * Add New Word
 * input: an English word
 *
 * 1. 単語入力からアイテムを生成
 * 2. ItemをDBに登録
 * 3. cookieからuser_id取得
 * 4. user_wordテーブルにuser_id, word_idを保存
 *
 * return: itemのid, user_wordテーブルid
 */
export const addNewWordWordAddNewWordPost = <ThrowOnError extends boolean = false>(options: Options<AddNewWordWordAddNewWordPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddNewWordWordAddNewWordPostResponse, AddNewWordWordAddNewWordPostError, ThrowOnError>({
        url: '/word/add_new_word',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get User Word List
 * Get the list of words saved by the current user.
 */
export const getUserWordListWordGetUserWordListGet = <ThrowOnError extends boolean = false>(options?: Options<GetUserWordListWordGetUserWordListGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserWordListWordGetUserWordListGetResponse, GetUserWordListWordGetUserWordListGetError, ThrowOnError>({
        url: '/word/get_user_word_list',
        ...options
    });
};

/**
 * Root
 */
export const rootGet = <ThrowOnError extends boolean = false>(options?: Options<RootGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};